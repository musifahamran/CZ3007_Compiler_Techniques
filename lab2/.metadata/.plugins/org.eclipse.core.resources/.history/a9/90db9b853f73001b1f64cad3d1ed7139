// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
  */
  

/*Module and Imports*/

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports 
			| 
			;
Import = IMPORT ID SEMICOLON;



/*Declarations and Accessibility*/
Declarations = Declaration Declarations
             | 
             ;
Declaration = FunctionDeclaration
            | FieldDeclaration
            | TypeDeclaration
            ;
FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY;
FieldDeclaration = Accessibility TypeName ID SEMICOLON;
TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;
Accessibility = PUBLIC
              | 
              ;


/*TypeName, PrimitiveType and ArrayType*/
TypeName = PrimitiveType
         | ArrayType
         | ID
         ;
PrimitiveType = VOID
              | BOOLEAN
              | INT
              ;
ArrayType = ArrayType LBRACKET RBRACKET
		  | ID LBRACKET RBRACKET
		  | PrimitiveType LBRACKET RBRACKET
		  ;
                   

/*Parameters*/
ParameterList = ParameterListTail
              | 
              ;
ParameterListTail = Parameter COMMA ParameterListTail
              | Parameter
              ;
Parameter = TypeName ID;



/*Statements*/
Statement = LocalVarDec
          | BlockStatement
          | IfStatement
          | WhileStatement
          | BreakStatement
          | ReturnStatement
          | ExpStatement             
          ;
LocalVarDec = TypeName ID SEMICOLON;
BlockStatement = LCURLY StatementList RCURLY;
StatementList = Statement StatementList
              | 
              ;           
IfStatement = IF LPAREN Expression RPAREN Statement
				| IF LPAREN Expression RPAREN Statement ELSE Statement
				;
WhileStatement = WHILE LPAREN Expression RPAREN Statement;
BreakStatement = BREAK SEMICOLON;
ReturnStatement = RETURN SEMICOLON
                | RETURN Expression SEMICOLON
                ;
ExpStatement = Expression SEMICOLON;
       
       
    
/*Expression and Assignment*/   
Expression = Assignment
           | RHSExpression
           ;     
Assignment = LHSExpression EQL Expression;   
    
    
/*LHSExpression and ArrayAccess*/
LHSExpression = ID
              | ArrayAccess
              ;
ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET
				| ID LBRACKET Expression RBRACKET
				;
              


/*RHSExpression and ComparisonOperator*/
RHSExpression = ArithmeticExpression 
              | ArithmeticExpression ComparisonOperator ArithmeticExpression
              ;  
ComparisonOperator = EQEQ
                   | NEQ
                   | LT
                   | LEQ
                   | GT
                   | GEQ
                   ;             

ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
                     | Term
                     ;                

AdditiveOperator = PLUS
                 | MINUS
                 ;

Term = Term MultiplicativeOperator Factor
     | Factor
     ;
MultiplicativeOperator = TIMES
                       | DIV
                       | MOD
                       ;         
                       
                      
Factor = MINUS Factor
       | PrimaryExpression
       ;
       
PrimaryExpression = LHSExpression
                  | FunctionCall
                  | ArrayExpression
                  | STRING_LITERAL
                  | INT_LITERAL
                  | Boolean
                  | ParenthesisedExpression
                  ;
                     
                       
/*FunctionCall and ExpressionList*/
FunctionCall = ID LPAREN ExpressionList RPAREN;

ExpressionList = ExpressionListTail
               |
               ;    
ExpressionListTail =  Expression 
						| Expression COMMA ExpressionListTail
						; 


/*Array Expressions*/
ArrayExpression = LBRACKET NonEmptyListOfExpressions RBRACKET;

NonEmptyListOfExpressions = Expression COMMA NonEmptyListOfExpressions
                          | Expression
                          ;

/*Boolean*/
Boolean = TRUE
        | FALSE
        ;
              
/*Parenthesis Expressions*/
ParenthesisedExpression = LPAREN Expression RPAREN;       
     

             
            


/**/
