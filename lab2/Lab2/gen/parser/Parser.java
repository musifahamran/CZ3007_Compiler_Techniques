package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short RBRACKET = 11;
		static public final short VOID = 12;
		static public final short BOOLEAN = 13;
		static public final short INT = 14;
		static public final short LCURLY = 15;
		static public final short SEMICOLON = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLWTqL4KKlVyl8BiB8I8aW91G924XnD12GaX0IW840sf04PGYYagig0Ia2IWglKJ5YiT" +
		"pBDW5nQvOKR1tH14LKH54XAYeFE#VdLt#$jsVPS#9H$#UEw$CdJTlfmFcMfoEV9oC0IZ1G9" +
		"o84UY5oUY1FAJYSbGY2StG72rmB5gY5LBG94v#SfpyTZ7u6Gv#pUoESR5p7EmhCGhZq0#3C" +
		"1Yb68AwyXcMOYPcOJRQ8X7jaONEw1h1kuuyCyYJkrrvoyBYULnv2Igx8A#EA#zKd8QH8Txo" +
		"8#GT5U95ZiwvQdGY$MSgVvaZRaDCn51CG3qHr4Std2s$u0huu4S3Z7QDujvhSPY$IFx4M6U" +
		"VyY0QuVmeCT9TOcUx#Bkx#0jS$CDS$EKk$l4rnd7#gxsOYXaHunlBheZ5a9yndVFJ69EeNO" +
		"jZq1IjPGikm8Mu21VZ4bpg6FK#SUTGstRVi7pwXraDSRNQ6LxCvtfh8mTn7DBqUika5LZX7" +
		"J07Ls49EG7sqTIMe49seZUk3t3a0TcXjVl8deTEACJnw8BpC1UJC0QvvFR42JW9fs0uvHco" +
		"1cVX75mc3ydzk0OBC0NJv7lv3WknY3Et62iG#5QgSZdpIcSc6SZacPJ5#DcCdyDTruNxhXj" +
		"NNwvQ1$difO2hel1$nlytsGRFIWzFjRgenxEeFaVNn$blmDbDuDxsSBuQSwKsYU0bafSIuW" +
		"rrvON7CrnvWUo2l4QklC3z4EGb7o7F5#AvZOwRtnctYAlVylJbkkhFKIXJZC1#6HXtz4Y$Z" +
		"r6SVNhfAQc5sF#jt$clBDiVrLkJNUS8MtZvbh0qQ#uDeZNQyBPjnpEgVKI6yUPGstPuFk5M" +
		"aTuPVTcglzfrFhODhBTKwe4LxkMfNCptaw7PGwWrOmzUdfojGXolrloAxU4PxcN4flmr9nB" +
		"9JUATurVpOac$QfEeIeE$e2U9cVlfDqHzI5HbCdT4rUp0kRk8U9buW$W8C4THLWD69lNnbA" +
		"KMBmZwnj4tXiegwfEfxoNsq5v8kL$7N4szsjxE2TOVOljopLz7VRIEFu5rcoadqjX8EOHog" +
		"wwRpxeFAUVIsAjzCtIybjgUuyXt9kjqUsCxiOE#APIxwTX4FK7pachArv5xU$9JY0MwRHMH" +
		"HYpI$sTRP1ipcrYYzUb4Bh6KA29MwBWZgA$Kd1k8gKGnSMFidCp5EaOdwZTfdNDghjBw0M9" +
		"3b7Qt4jE8Ik8sOhNc7wH#k#RSIImZxY9kjhMzHSirn1s7$HXdqyk9dROsgP4vmDRMp0hgNA" +
		"XRRFg#M6FWYEaBjurUsjzMotnRtK3j6#PeK#uUtnYhy#Ny6TRSbmVMbpcSoD1rEV7bR5Gux" +
		"Ch3kZaood$SvU3hjMpCit6Yh4MZHJnvnSXvgNkTsI$#U9WUnLS5$SdViaz9blA7$2w$mV59" +
		"jIg$aQzbktmbs#HB#K9vjghoyn3lK#AJaFKnmTDFUBh81$AUl2lhgRqZRxBaBfANYEU9f#H" +
		"9MIzFoEEoJjRAO$AeF29lgmYRvIqbDya6ULQUaQVbEMNVQylj7bK#7B9Vb1Taexmkhychye" +
		"hm59RtbVz7LUwo8iiFiaTsoq#sAD#gya38tY#$SbmEAVql5YFvngl7rvn9W2ywwmLawbUG4" +
		"S8WtWw3UU#Kabj4c#kODv8HGbSRkZ564DPzPPt9rgrKJ7q0OtUdT4CkUJs8Gl8AsIwFDr8U" +
		"xz9yofxq5IXu#Bur#Vem579efrDQwC0SBLYlaixg9ZIY8fjrsPIzDJhHjjuBVMn8Onzfb1a" +
		"naCd#hDTY6VCjKIyw3zzw7lNUwqYPHGpx1sVbWNC=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParameterList = ParameterListTail
			Action.NONE,  	// [24] ParameterList = 
			RETURN3,	// [25] ParameterListTail = Parameter COMMA ParameterListTail; returns 'ParameterListTail' although none is marked
			Action.RETURN,	// [26] ParameterListTail = Parameter
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [28] Statement = LocalVar
			Action.RETURN,	// [29] Statement = BlockOfStatements
			Action.RETURN,	// [30] Statement = IfStatement
			Action.RETURN,	// [31] Statement = WhileStatement
			Action.RETURN,	// [32] Statement = BreakStatement
			Action.RETURN,	// [33] Statement = ReturnStatement
			Action.RETURN,	// [34] Statement = ExpressionStatement
			RETURN3,	// [35] LocalVar = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [36] BlockOfStatements = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [37] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [38] StatementList = 
			RETURN5,	// [39] IfStatement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [40] IfStatement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [41] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [42] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [44] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [45] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [46] Expression = Assignment
			Action.RETURN,	// [47] Expression = RHSExpression
			RETURN3,	// [48] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [49] LHSExpression = ID
			Action.RETURN,	// [50] LHSExpression = ArrayAccess
			RETURN4,	// [51] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [52] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [53] RHSExpression = ArithmetricExpression
			RETURN3,	// [54] RHSExpression = ArithmetricExpression ComparisonOperator ArithmetricExpression; returns 'ArithmetricExpression' although none is marked
			Action.RETURN,	// [55] ComparisonOperator = EQEQ
			Action.RETURN,	// [56] ComparisonOperator = NEQ
			Action.RETURN,	// [57] ComparisonOperator = LT
			Action.RETURN,	// [58] ComparisonOperator = LEQ
			Action.RETURN,	// [59] ComparisonOperator = GT
			Action.RETURN,	// [60] ComparisonOperator = GEQ
			new Action() {	// [61] ArithmetricExpression = ArithmetricExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [62] ArithmetricExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [63] AdditiveOperator = PLUS
			Action.RETURN,	// [64] AdditiveOperator = MINUS
			new Action() {	// [65] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [66] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [67] MultiplicativeOperator = TIMES
			Action.RETURN,	// [68] MultiplicativeOperator = DIV
			Action.RETURN,	// [69] MultiplicativeOperator = MOD
			RETURN2,	// [70] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [71] Factor = PrimaryExpression
			Action.RETURN,	// [72] PrimaryExpression = LHSExpression
			Action.RETURN,	// [73] PrimaryExpression = FunctionCall
			Action.RETURN,	// [74] PrimaryExpression = ArrayExpression
			Action.RETURN,	// [75] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [76] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [77] PrimaryExpression = TRUE
			Action.RETURN,	// [78] PrimaryExpression = FALSE
			Action.RETURN,	// [79] PrimaryExpression = ParanthesisedExpression
			RETURN4,	// [80] FunctionCall = ID LPAREN ExpressionList RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [81] ExpressionList = ExpressionListTail
			Action.NONE,  	// [82] ExpressionList = 
			Action.RETURN,	// [83] ExpressionListTail = Expression
			RETURN3,	// [84] ExpressionListTail = Expression COMMA ExpressionListTail; returns 'ExpressionListTail' although none is marked
			RETURN3,	// [85] NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList; returns 'NonEmptyExpressionList' although none is marked
			Action.RETURN,	// [86] NonEmptyExpressionList = Expression
			RETURN3,	// [87] ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3	// [88] ParanthesisedExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
